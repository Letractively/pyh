#summary User manual for the PyH library
<wiki:toc max_depth="2" />
= Introduction =

PyH is a very simple python library that lets you write HTML content from within your python program. Hard-coding plain HTML into your python code is boring and can make your code completely unreadable. Plus, once you'll have a look at the source of the HTML file, it won't be readable either. PyH gives you a nice solution for all of this.
==Features==
  * Automatic formating of HTML tags
  * High customizability
  * full CSS awareness
  * Automatic tag closure when possible
  * Primitive verification of tag hierarchy
=How to install PyH=
Download the latest version of pyh from the [http://code.google.com/p/pyh/downloads/list Download tab] or directly from here [http://pyh.googlecode.com/files/pyh-0.1.tar.gz pyh-0.1.tar.gz], unpack it in your working directory or in your system's python directory, usually `/usr/lib/pythonX.X/site-packages` or anywhere visible by the environment variable `$PYTHONPATH`:
{{{
$ wget http://pyh.googlecode.com/files/pyh-0.1.tar.gz
$ tar xvzf pyh-0.1.tar.gz -C ~/path_to_my_project/   #or
$ sudo tar xvzf pyh-0.1.tar.gz -C /usr/lib/pythonX.X/site-packages
}}}
and use it as follows
===Quick example===
{{{
from pyh import *

page = PyH('My wonderful PyH page')
page.addCSS(['myStylesheet1.css', 'myStylesheet2.css'])
page.addJavaScript(['myJavascript1.js', 'myJavascript2.js'])
page += h1(cl='center', txt='My big title')                    # auto-closure of h1
page += div(cl='myCSSclass1 myCSSclass2', id='myCSSid1')
page += p(id='myCSSid2', txt='I love PyH!')                    # auto-closure of p
page += div()                                                  # closure of div
page += ValidW3C()                           
page.render()
}}}
=Express manual=
  * The pyh.py module resides in the pyh directory so that you have to import it as such :
{{{
>>> from pyh.pyh import *
}}}
  * HTML tags can be generated by calling the function of the same name :
{{{
>>> div() + p() + p() + div()
'<div><p></p>\n</div>\n'
}}}
  * Tag attributes are passed as keyword parameters to the functions. The keyword is the same name as the attribute except for the attribute `class` :
{{{
>>> div(cl='myCSSclass1 myCSSclass2', id='myCSSid1') + p(id='myCSSid2') + p() + div()
'<div class="myCSSclass1 myCSSclass2" id="myCSSid1"><p id="myCSSid2"></p>\n</div>\n'
}}}
  * The content to be printed between the opening tag and the closing tag can be specified via the `txt` keyword argument. In that case, as well as in the cas of the `src` argument, the tag closes itself automatically. There is no need to close it by hand.
{{{
>>> div(cl='myCSSclass1 myCSSclass2', id='myCSSid1') + p(id='myCSSid2', txt='I love PyH!') + div()
'<div class="myCSSclass1 myCSSclass2" id="myCSSid1"><p id="myCSSid2">I love PyH!</p>\n</div>\n'
>>> div(cl='myCSSclass1 myCSSclass2', id='myCSSid1', txt=p(id='myCSSid2', txt='I love PyH!'))
'<div class="myCSSclass1 myCSSclass2" id="myCSSid1"><p id="myCSSid2">I love PyH!</p>\n</div>\n'
}}}
=Full reference=
==Header and PyH class==
The first thing to do is to instantiate the PyH class
{{{
page = PyH('My wonderful PyH page')
}}}
Then you can add a CSS
{{{
page.addCSS('myCSS.css')
}}}
or multiple CSS at the same time
{{{
page.addCSS(['myCSS1.css', 'myCSS2.css'])
}}}
Similarly, you can add javascript files
{{{
page.addJavaScript('myJavaScript.js')
}}}
or several at the same time. You can set the language of your page with
{{{
lang.setLang('fr')
}}}
==HTML tags==
Each `<html_tag>` listed in [UserManual#Available_tags Available tags] has a corresponding function `pyh.html_tag(**kw)` that takes as input keyword arguments corresponding to the attributes of the tag. Keywords are the same as attribute names except for the CSS class of the tag which uses the keyword `cl`. The function returns a string of the desired tag.
==Filling the body==
In order to fill the body of your page, just use the operator on you PyH object to append a tag.
{{{
page += h1(cl="myH1Class", txt="My beautiful title")
}}}
==Closing and rendering==
In order for you page do be displayed you need to call
{{{
page.render()
}}}
This call will generated the header, body and footer of your page and print it to `stdout`.
If you want to write the page to a file instead of `stdout`, just use
{{{
page.render('myHTMLFile.html')
}}}
==Tag closure policy==
  * If a tag was previously open, the next call to the associated function will by default close the tag.
{{{
>>> div()+div()
'<div></div>\n'
}}}
  * To force opening of a new tag, the argument `open=True` must be passed.
{{{
>>> div() + div(open=True) + div() + div()
'<div><div></div>\n</div>\n'
}}}
  * If the keywords `src` or `txt` are specified, the tag will be closed automatically.
{{{
>>> div(txt='I love PyH!')
'<div>I Love PyH!</div>\n'
}}}
 * After closure a new line `\n` is inserted except for certain tags.
==Available tags==
===As functions===
  * `table`
  * `th`
  * `tr`
  * `td`
  * `h2`
  * `h1`
  * `div`
  * `fieldset`
  * `select`
  * `input`
  * `span`
  * `legend`
  * `p`
  * `option`
  * `form`
  * `img`
  * `a`
  * `head`
  * `title`
  * `link`
  * `script`
  * `body`
  * `html`
===As strings===
  * `br = '<br />\n'`
  * `nl = '\n'`
  * `doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'`
  * `charset = '<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />'`